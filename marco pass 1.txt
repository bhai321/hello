PASS-1 MACROPROCESSOR :
MAIN PROGRAM:

import java.util.*;

import java.io.*;

class MACRO

{

static String mnt[] []=new String[5][3]; //assuming 5 macros in 1
program

static String ala[][]=new String[10][2]; //assuming 2 arguments in
each macro

static String mdt[] []=new String[20][1]; //assuming 4 Loc for each
macro

static int mntc=0,mdtc=0,alac=0;

public static void main(String args[])

{

passl();

System. out.println("\n*********PASS—1 MACROPROCESSOR******e**eR\ NM) 7
System.out.println("MACRO NAME TABLE (MNT) \n");
System.out.println("i macro loc\n");

display (mnt,mntc,3);

System.out.println("\n");

System. out.println("ARGUMENT LIST ARRAY(ALA) for Pass1l\n");
display(ala,alac,2);

System.out.println("\n");

System.out.println("MACRO DEFINITION TABLE (MDT) \n");
display (mdt,mdtc,1);

System.out.println("\n");

}

static void passl()
{

int index=0,i;
String s,prev=

Wr

, substring;

try

{

BufferedReader inp = new BufferedReader (new FileReader ("input.txt") );
File op = new File("passl output.txt");

if (fop.exists())

op.createNewFile();

BufferedWriter output = new BufferedWriter (new
FileWriter (op.getAbsoluteFile()));

while ((s=inp.readLine()) !=null)

{

if (s.equalsIgnoreCase ("MACRO") )

{

prev=s;
for(;!(s=inp.readLine()).equalsIgnoreCase ("MEND") ;mdtct+,prev=s)

{
if (prev.equalsIgnoreCase ("MACRO") )

{

StringTokenizer st=new StringTokenizer(s)
String str[]=new String[st.countTokens ()]
for (i=0;1<str.length;itt)
str[i]l=st.nextToken();

mnt [mntc] [0]=(mntct+1)4+""; //mnt formation
mnt [mntc] [1]=str[0];

mnt [mntc++] [2] =(++mdtc)+"";

st=new StringTokenizer(str[1],","); //tokenizing the arguments
String string[]=new String[st.countTokens()];

for (i=0;1<string.length;i++)

{

string[i]=st.nextToken();

ala[alac] [0]=alact""; //ala table formation

f
f

index=string[i].indexof ("=");

if (index!=-1)

ala[alact+] [1]=string[i].substring (0, index);
else

ala[alact+] [l]=string[i];
}
}

else //automatically eliminates tagging of arguments in definition
{ //mdt formation

index=s.indexoOf ("&");
substring=s.substring (index);

for (i=0;i<alac;i+tt)

if (ala[i] [1] .equals (substring) )
s=s.replaceAll (substring, "#"+tala[i][0]);
}

mdt [mdtc-1] [0]=s;

}

mdt [mdtc-1] [0]=s;

}

else

{

output.write(s);

output.newLine();

}

}

output.close();

}

catch (FileNotFoundException ex)

{

System. out.println("UNABLE TO END FILE ");
}

catch (IOException e)

{

e.printStackTrace();

}

}

static void display(String a[][],int n,int m)
{

int i,j?

for (i=0;i<n;it+t)

{

for (j=0;4<m;4++)
System. out.print(a[iJ[j]+" ");
System. out.printlin()

}

}

}

/* INPUT

START

MACRO

INCR &ARG3 &ARG2
ADD AREG &ARG1
MOVER BREG &ARG1
MEND

f

MACRO

PVG &ARG2 &ARG1
SUB AREG &ARG2
MOVER CREG & ARG1
MEND

INCR
DECR
DATA2

END
*/

/* OUTPUT

pvgcoen-3@pvgcoen3-ThinkCentre-M700:~/AAS javac MACRO.java
pvgcoen-3@pvgcoen3-ThinkCentre-M700:~/AAS java MACRO

KKKKKKKKKPASS—-1 MACROPROCESSOR****RKRKEKK
MACRO NAME TABLE (MNT)

1 macro loc

1 INCR 1

2 PVG 5

ARGUMENT LIST ARRAY(ALA) for Passl

O &ARG3
1 &ARG2
MACRO DEFINITION TABLE (MDT)

INCR &ARG3 &ARG2
ADD AREG &ARG1
MOVER BREG &ARG1
MEND

PVG &ARG2 &ARG1
SUB AREG #1
MOVER CREG & ARG1
MEND

*/
