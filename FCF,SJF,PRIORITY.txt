/* Problem Statement: Write a JAVA program (using oop features) to implement following
1. FCFS

2. SJF(Preemptive)

3. Priority(Non- Preemptive)

4. Round Robin(Preemptive)

1.FCFS
*/
import java.io.*;
import java.util.Scanner;
public class FCFS
{

public static void main(String args[])
{
int i,no_p,burst_time[],TT[],WT[];
float avg_wait=0,avg_TT=0;
burst_time=new int[50];
TT=new int[50];
WT=new int[50];
WT[O]=0;
Scanner s=new Scanner(System.in);
System.out.printin("Enter the number of process: ");
no_p=s.nextint();
System.out.printin("\nEnter Burst Time for processes:");
for{i=0;i<no_p;i++)

{
System.out.print("\tP"+({i+1)+": ");
burst_time[i]=s.nextint();

}

for{i=1;i<no_p;i++)

{
WT[iJ=WT[i-1]+burst_time|[i-1];
avg_wait+=WT([i];

}

avg_wait/=no_p;

for{i=0;i<no_p;i++)

{
TT[iJ=WT[i]+burst_time[i];
avg_TT+=TT[i];
avg_TT/=no_p;

’

‘ " "
System.out.printin{ \ IDF ERR ER ERR ERE ERR RRR EERE RRR ERE ERE ERE REE REE EE )

System.out.printin("\tProcesses:");

System. out. printhn("* ***## FERRER EEE EERE BREE EERE EERE EEE EERE REE EERE RE EEE EERE RE EEE EEN)
System.out.printIn(" Process\tBurst Time\tWaiting Time\tTurn Around Time");
for{i=0;i<no_p;i++)

 

{

System.out.printin("\tP"+({i+1)+"\t "+burst_timef[i]+"\t\t "+WT[i]+"\t\t "+TTLi]);
}
System.out.printin("\n ");

System.out.printIn("\nAverage waiting time : "+avg_wait);
System.out.printIn("\nAverage Turn Around time : "+avg_TT+"\n");

/*Output:
Enter the number of process:
3

Enter Burst Time for processes:
P1: 24
P2: 3
P3: 3

FE AE AG AS He He ee Ae AS HH ee ES A HR ee EE AC AE AE A HH ee AE AC He HR ee EAC I He ee EC ee ee eC AC Ce ee

Processes:
ARE Hee ee ee ee ee ee ie ee eee He eee ee He He Ae ee ie He ee He eee ee Ae eee ee ee ee ee ee eee eee ee

Process Burst Time Waiting Time Turn Around Time
P1 24 0 24
P2 3 24 27
P3 3 27 30

 

Average waiting time : 17.0
Average Turn Around time : 27.0 */
/*Round Robin{Preemptive)*/
import java.util.*;

import java.io.*;

class RoundR

{

public static void main(String args[])
{
int Process[]=new int[10];
int a[]=new int[10];
int Arrival_time[]=new int[10];
int Burst_time[]=new int[10];
int WT[]=new int[10];
int TAT[]=new int[10];
int Pno,sum=0;;
int TimeQuantum;

System.out.printIn("\nEnter the no. of Process::");
Scanner sc=new Scanner(System.in);
Pno=sc.nextint();
System.out.printIn("\nEnter each process::");
for(int i=0;i<Pno;i++)
{

Process[i]=sc.nextint();

System.out.printin("\nEnter the Burst Time of each process::");
for(int i=0;i<Pno;i++)
{
Burst_time[i]=sc.nextint();
}
System.out.printin("\nEnter the Time Quantum::");
TimeQuantum=sc.nextInt{);
do{
for(int i=0;i<Pno;i++)
{
if(Burst_time[i]>TimeQuantum)
{
Burst_time[i]-=TimeQuantum;
for(int j=0;j<Pno;j++)
{
if((j!=i)&&(Burst_time[j]!=0))
WT[j]+=TimeQuantum;
}
else
{

for(int j=0;j<Pno;j++)

{
if((j!=i)&&(Burst_time[j]!=0))
WT[j]+=Burst_time[i];

}

Burst_time[i]=0;

}
}
sum=0;

for(int k=0;k<Pno;k++)
sum=sum+Burst_time|[k];
} while(sum!=0);

for(int i=0;i<Pno;i++)
TAT[iJ=WT[i]+al[i];
System.out.printIn("process\t\tBT\tWT\tTAT");
for(int i=0;i<Pno;i++)
{
System.out.printin("process"+(i+1)+"\t"+a[i]+"\t"+WT[i]+"\t"+TAT[i]);

float avg_wt=0;
float avg_tat=0;
for(int j=0;j<Pno;j++)

{

avg_wtt=WT (jl;
}
for(int j=0;j<Pno;j++)
{

avg_tat+=TAT|j];
}

System.out.printIn("average waiting time "+{avg_wt/Pno)+"\n Average turn around
time"+(avg_tat/Pno));
}

/*OUTPUT::
unix@ unix-HP-280-G1-
MT:~/TEA33$ java RoundR
Enter the no. of Process::

5

Enter each process::

1

WB WN

Enter the Burst Time of each process::

wu B wOrRP N

Enter the Time Quantum::

2
process
process1
process2
process3
process4
process5

oo 0 8

0

WT

2
12
9
13

average waiting time 7.2

Average turn around time7.2

TAT

12

13

*/
/* 2. SIF(Non-Preemptive) */

import java.util.Scanner;

class SJF1{

public static void main(String args[]){

int burst_time[],process[],waiting_time|[],tat[],i,j,n,total=0,pos,temp;
float wait_avg,TAT_avg;

Scanner s = new Scanner(System.in);

System.out.print("Enter number of process: ");
n =s.nextint{);

process = new int[n];
burst_time = new int[n];
waiting time = new int[n];
tat = new int[n];

System.out.printin("\nEnter Burst time:");
for(i=O;i<n;i++)

{

System.out.print("\nProcess["+(i+1)+"]: ");
burst_time[i] = s.nextint();;

process[i]=i+1; //Process Number

}

//Sorting

for(i=O;i<n;i++)

{

possi;

for(j=i+1;j<n;j++)

{
if(burst_time|[j]<burst_time[pos])
pos=j;

}

temp=burst_timeli];
burst_time[i]=burst_time[pos];
burst_time[pos]=temp;

temp=process[i];
process|i]=process[pos];
process[pos]=temp;

}
//First process has O waiting time
waiting _time[0]=0;

//calculate waiting time
for(i=1;i<n;i++)

{

waiting time[i]=0;

for(j=0;j<i;j++)
waiting_time[i]+=burst_timef[j];
total+=waiting_time|i];

}

//Calculating Average waiting time
wait_avg=(float)total/n;
total=0;

System.out.printIn("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");

for(i=O;i<n;i++)

{

tat[i]=burst_time|[i]+waiting_timeli]; //Calculating Turnaround Time

total+=tat([i];

System.out.printin("\n p"+process[i]+"\t\t "+burst_time[iJ+"\t\t "+waiting_time[i]+"\t\t "+tat[i]);
}

//Calculation of Average Turnaround Time
TAT_avg=(float)total/n;

System.out.printin("\n\nAverage Waiting Time: "+wait_avg);
System.out.printIn("\nAverage Turnaround Time: "+TAT_avg);
/* 2. SJF(Preemptive)*/
import java.util.Scanner;

class sjf_swapl{

public static void main(String args[])

{

int
burst_time[],process[],waiting_time|[],tat[],arr_time[],completion_time[],i,j,n,total=0,total_comp=0,pos,
temp;

float wait_avg,TAT_avg;

Scanner s = new Scanner(System.in);
System.out.print("Enter number of process: ");
n =s.nextint{);

process = new int[n];

burst_time = new int[n];

waiting time = new int[n];

arr_time=new int[n];

tat = new int[n];

completion_time=new int[n];

//burst time

System.out.printin("\nEnter Burst time:");
for(i=O;i<n;i++)

{

System.out.print("\nProcess["+(i+1)+"]: ");
burst_time[i] = s.nextint();;

process[i]=i+1; //Process Number

}

//arrival time

System.out.printin("\nEnter arrival time:");
for(i=O;i<n;i++)

{

System.out.print("\nProcess["+(i+1)+"]: ");
arr_time|i] = s.nextint();;

process[i]=i+1; //Process Number

}

//Sorting
for(i=O;i<n;i++)

{

possi;
for(j=i+1;j<n;j++)

{
if(burst_time|[j]<burst_time[pos])
pos=j;

}

temp=burst_timeli];
burst_time[i]=burst_time[pos];
burst_time[pos]=temp;

temp=process[i];
process|i]=process[pos];
process[pos]=temp;

System.out.printIn("process"+process[i]);
}

//completion time new

for(i=1;i<n;i++)

{

completion_time[i]=0;

for(j=0;j<i;j++)
completion_time[i]+=burst_time|j];
total_comp+=completion_time|i];

}

//First process has O waiting time
waiting _time[0]=0;

//calculate

waiting time

for(i=1;i<n;i++)

{

waiting time[i]=0;

for(j=0;j<i;j++)
waiting_time[i]+=burst_timef[j];
total+=waiting_time|i];

}

//Calculating Average waiting time
wait_avg=(float)total/n;
total=0;
System.out.printIn("\nPro_number\t Burst Time \tcompletion_time\tWaiting Time\tTurnaround Time");
for(i=O;i<n;i++)

{

tat[i]=burst_time[i]+waiting timel[i];

//Calculating Turnaround Time

total+=tat([i];

System.out.printin("\n"+process[i]+"\t\t "+burst_time[i]+"\t\t
"+completion_time[i]+"\t\t"+waiting_time[i]+"\t\t "+tat[i]);

}

//Calculation of Average Turnaround Time
TAT_avg=(float)total/n;
System.out.printin("\n\nAWT: "+wait_avg);
System.out.printIn("\nATAT: "+TAT_avg);
